import Cron from 'node-cron';
import { getAllInvalidNonKickedUsers, getAllUsers, markUserAsKicked, getAllValidUsers, updateUsersStatusAssinatura, updateUsersDiasAteFimAssinatura, getAllValidUsersWithPaymentBoleto } from '../dao';
import { connection } from '../db';
import CacheService from './cache';
import { Telegram } from 'telegraf';
import { getChat } from './chatResolver';
import { log, logError, enviarMensagemDeErroAoAdmin } from '../logger';
import User from '../model/User';
import { createCsvFile } from './csv';
import { sendReportToEmail } from './email';

const startCronJobs = () => {
    try {
        removeInvalidUsers();
        updateValidUsersStatusAssinatura();
        updateValidUsersDiasAteFimAssinatura();
        sendCsvReportToEmail();
    } catch (err) {
        logError(`ERRO AO EXECUTAR CRONJOB`, err)
    }
}

const removeInvalidUsers = () => {
    const each15Minutes = '*/15 * * * *';
    const telegramClient = CacheService.get<Telegram>('telegramClient');

    Cron.schedule(each15Minutes, async () => {
        log(`‚è±Ô∏è Iniciando cronjob para remover usu√°rios inv√°lidos`)
        const usersToKick = []
        const chatIdsPromises = []

        let invalidUsers;
        try {
            invalidUsers = await getAllInvalidNonKickedUsers(connection);
            log(`‚è±Ô∏è Pegando usu√°rios inv√°lidos ${invalidUsers}`)
        } catch (err) {
            throw err;
        }
        invalidUsers.forEach(invalidUser => {
            chatIdsPromises.push(getChat(invalidUser.plano, invalidUser.data_assinatura))
        })

        let chatIds;
        try {
            chatIds = await Promise.all(chatIdsPromises);
            log(`‚è±Ô∏è Pegando chats com usu√°rios inv√°lidos ${chatIds}`)
        } catch (err) {
            logError(`‚è±Ô∏è ERRO AO PEGAR CHATS COM USU√ÅRIOS INV√ÅLIDOS ${invalidUsers}`, err)
            await enviarMensagemDeErroAoAdmin(`‚è±Ô∏è ERRO AO PEGAR CHATS COM USU√ÅRIOS INV√ÅLIDOS ${invalidUsers}`, err);
            throw err;
        }

        invalidUsers.forEach((invalidUser, index) => {
            usersToKick.push(telegramClient.kickChatMember(process.env.ID_CANAL_GERAL, invalidUser.id_telegram));
            usersToKick.push(telegramClient.kickChatMember(chatIds[index][1], invalidUser.id_telegram));
            usersToKick.push(markUserAsKicked(invalidUser.id_telegram, connection))
        })

        try {
            await Promise.all(usersToKick);
            log(`‚è±Ô∏è Usu√°rios inv√°lidos removidos ${usersToKick}`)
        } catch (err) {
            logError(`‚è±Ô∏è ERRO AO REMOVER USU√ÅRIOS INV√ÅLIDOS ${usersToKick}`, err)
            await enviarMensagemDeErroAoAdmin(`‚è±Ô∏è ERRO AO REMOVER USU√ÅRIOS INV√ÅLIDOS ${usersToKick}`, err)
            throw err;
        }
    });
}

const updateValidUsersStatusAssinatura = () => {
    const eachHour = '0 */1 * * *';

    Cron.schedule(eachHour, async () => {
        log(`‚è±Ô∏è Iniciando cronjob para atualizar status de assinatura de usu√°rios v√°lidos`)

        let allUsers = [];
        try {
            allUsers = await getAllValidUsers(connection);
            await updateUsersStatusAssinatura(allUsers, connection);
        } catch (err) {
            logError(`‚è±Ô∏è ERRO AO ATUALIZAR STATUS DE ASSINATURA DE USU√ÅRIOS V√ÅLIDOS ${allUsers}`, err)
            enviarMensagemDeErroAoAdmin(`‚è±Ô∏è ERRO AO ATUALIZAR STATUS DE ASSINATURA DE USU√ÅRIOS V√ÅLIDOS ${allUsers}`, err)
            throw err;
        }
    });
}

const updateValidUsersDiasAteFimAssinatura = async () => {
    const eachDayAt8AM = '0 8 * * *';
    const test = '* * * * *';

    Cron.schedule(eachDayAt8AM, async () => {
        log(`‚è±Ô∏è Iniciando cronjob para atualizar dias at√© fim de assinatura de usu√°rios v√°lidos`)

        let allUsers = [];
        try {
            allUsers = await getAllValidUsers(connection);
            await updateUsersDiasAteFimAssinatura(allUsers, connection);
            const allUsersUpdated = await getAllValidUsersWithPaymentBoleto(connection);
            await sendMessageToUsersCloseToEndAssinatura(allUsersUpdated)
        } catch (err) {
            logError(`ERRO AO ATUALIZAR DIAS AT√â FIM DE ASSINATURA DE USU√ÅRIOS ${allUsers}`, err);
            enviarMensagemDeErroAoAdmin(`‚è±Ô∏è ERRO AO ATUALIZAR DIAS AT√â FIM DE ASSINATURA DE USU√ÅRIOS V√ÅLIDOS ${JSON.stringify(allUsers)}`, err)
            throw err;
        }
    })
}

const sendMessageToUsersCloseToEndAssinatura = async (users: User[]) => {
    const mensagemAviso = (dias) => `Ol√°! Acabei de verificar que daqui a ${dias} dia(s) seu plano vai expirar.\n\nSe voc√™ quer continuar lucrando com a fam√≠lia M√©todo Trader Infal√≠vel tendo acesso ao curso completo, lista de sinais di√°ria, opera√ß√µes ao vivo e sinais em tempo real, acesse agora seu email para verificar ou acesse direto a Monetizze e gere seu boleto.\n\nQualquer d√∫vida chame um dos suportes abaixo ‚§µÔ∏è`
    const telegramClient = CacheService.get<Telegram>('telegramClient');
    const usersCloseToEndAssinatura = users.filter(user => user.getUserData().diasAteFimDaAssinatura <= 3)
    const actions = []
    usersCloseToEndAssinatura.forEach(user => {
        if (user.getUserData().diasAteFimDaAssinatura === 3) {
            actions.push(telegramClient.sendMessage(user.getUserData().telegramId, mensagemAviso(3), {reply_markup: {inline_keyboard: [[{text: 'üëâ SUPORTE 1', url:'t.me/juliasantanana'}], [{text: 'üëâ SUPORTE 2', url: 't.me/diego_sti'}], [{text: 'üëâ SUPORTE 3', url: 't.me/julianocba'}]]}}))
        }
        if (user.getUserData().diasAteFimDaAssinatura === 2) {
            actions.push(telegramClient.sendMessage(user.getUserData().telegramId, mensagemAviso(2), {reply_markup: {inline_keyboard: [[{text: 'üëâ SUPORTE 1', url:'t.me/juliasantanana'}], [{text: 'üëâ SUPORTE 2', url: 't.me/diego_sti'}], [{text: 'üëâ SUPORTE 3', url: 't.me/julianocba'}]]}}))
        }
        if (user.getUserData().diasAteFimDaAssinatura === 1) {
            actions.push(telegramClient.sendMessage(user.getUserData().telegramId, mensagemAviso(1), {reply_markup: {inline_keyboard: [[{text: 'üëâ SUPORTE 1', url:'t.me/juliasantanana'}], [{text: 'üëâ SUPORTE 2', url: 't.me/diego_sti'}], [{text: 'üëâ SUPORTE 3', url: 't.me/julianocba'}]]}}))
        }
    })
};

const sendCsvReportToEmail = () => {
    const eachDayAt9AM = '0 9 * * *';
    const header = ['Id Telegram', 'User Telegram', 'Plano', 'Cupom Desconto', 'Nome Completo', 'Telefone', 'Email', 'Forma de Pagamento', 'Data Assinatura', 'Status Assinatura', 'Dias Ate Fim Assinatura', 'Kickado', 'Ver Canais']

    Cron.schedule(eachDayAt9AM, async () => {
        log(`‚è±Ô∏è Iniciando cronjob para enviar relat√≥rio di√°rio de usu√°rios por email`)
        try {
            const allUsers = await getAllUsers(connection);
            await createCsvFile(header, allUsers, 'usuarios.csv');
            log(`‚è±Ô∏è Relat√≥rio de usu√°rios criado com sucesso!`)
            await sendReportToEmail()
            log(`‚è±Ô∏è Relat√≥rio de usu√°rios enviado por email com sucesso!`)
        } catch (err) {
            logError(`‚è±Ô∏è ERRO AO ENVIAR RELAT√ìRIO DI√ÅRIO DE USU√ÅRIOS`, err);
            enviarMensagemDeErroAoAdmin(`‚è±Ô∏è ERRO AO ENVIAR RELAT√ìRIO DI√ÅRIO DE USU√ÅRIOS}`, err)
            throw err;
        }
    });
}

export { startCronJobs }